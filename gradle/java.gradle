/*
 * Sensible defaults for Java projects
 * TODO Change compiler warnings for errors
 */

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'groovy'
apply plugin: 'maven-publish'

defaultTasks 'build'

// Allows caller to change version from the command line by passing `-PoverrideVersion=<version>`
version = findProperty ('overrideVersion') ?: version

ext.umlgraphVersion = '5.6.6'
ext.groovyVersion = '2.4.15'

sourceCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral ()
    mavenLocal ()
}

// Replace build variables in resource files
processResources {
    [ 'properties', 'ini', 'cfg', 'txt', 'html', 'xml', 'json', 'yaml' ].each { String ext ->
        filesMatching ("**/*.$ext") {
            filter {
                it
                    .replace ('${projectVersion}', project.version.toString())
                    .replace ('${projectName}', project.name)
                    .replace ('${projectGroup}', project.group.toString ())
                    .replace ('${projectDescription}', project.description ?: '')
            }
        }
    }
}

configurations {
    umlgraphDoclet
}

dependencies {
    umlgraphDoclet ("org.umlgraph:umlgraph:$umlgraphVersion")

    testCompile ("org.codehaus.groovy:groovy-all:$groovyVersion")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar
            artifact javadocJar
            artifact testJar
        }
    }
    repositories {
        maven {
            url findProperty ('repositoryUrl') ?: ''
            credentials {
                username findProperty ('repositoryUsername') ?: ''
                password findProperty ('repositoryPassword') ?: ''
            }
        }
    }
}

clean {
    delete 'build', 'log', 'out'

    delete (
        fileTree(rootDir) { include '**/*.log' },
        fileTree(rootDir) { include '**/*.hprof' }
    )
}

tasks.withType (Test).each { testTask ->
    testTask.testLogging {
        events 'skipped', 'failed', 'standardOut', 'standardError'
    }

    testTask.options {
        System.properties['user.dir'] = testTask.workingDir // Required for Jacoco to work properly
        testTask.systemProperties(System.properties as Map<String, ?>)
    }
}

test {
    exclude '**/*IT.*'
}

task verify(dependsOn: 'test', type: Test) {
    include '**/*IT.*'
}

// To generate the diagrams Graphviz should be installed and in the PATH
javadoc {
    options.memberLevel = 'PACKAGE'
    options.docletpath = configurations.umlgraphDoclet.files as List
    options.doclet = 'org.umlgraph.doclet.UmlGraphDoc'

    options.addBooleanOption('views', true)
    options.addBooleanOption('attributes', true)
    options.addBooleanOption('enumconstants', true)
    options.addBooleanOption('inferrel', true)
    options.addBooleanOption('inferdep', true)
    options.addBooleanOption('types', true)
    options.addBooleanOption('visibility', true)

    options.addStringOption('hide', 'java.*')
    options.addStringOption('collpackages', 'java.util.*')
    options.addStringOption('nodefontsize', '9')
    options.addStringOption('nodefontpackagesize', '7')
    options.addStringOption('link', 'http://download.oracle.com/javase/8/docs/api/')

    // Check http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html
    options.addBooleanOption('Xdoclint:all,-missing', true)
}

task jarAll (type: Jar, dependsOn: 'build') {
    baseName = "$baseName-all"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

task sourceJar (type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

task testJar(type: Jar, dependsOn: testClasses) {
    classifier 'test'
    from sourceSets.test.output.classesDirs
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from fileTree ("$buildDir/docs/javadoc")
}

// Generate coverage reports properly
jacocoTestReport {
    dependsOn 'test'
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
